{{template "base" .}}

{{define "content" }}
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-5 text-center" style="padding: 3px">Test microservices</h1>
                <hr>
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Heartbeat</h5>
                        <div class="row">
                            <div class="col-3">
                                <a id="broker-heartbeat-btn" class="btn btn-outline-dark w-100 text-center" href="javascript:void(0);">
                                    Broker
                                </a>
                            </div>
                            <div class="col-3">
                                <a id="auth-heartbeat-btn" class="btn btn-outline-dark w-100 text-center" href="javascript:void(0);">
                                    Test Auth
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Auth</h5>
                        <div class="row">
                            <div class="col-6">
                                <a id="auth-success-btn" class="btn btn-outline-dark w-100 text-center" href="javascript:void(0);">
                                    Success
                                </a>
                            </div>
                            <div class="col-6">
                                <a id="auth-unauthorized-btn" class="btn btn-outline-dark w-100 text-center" href="javascript:void(0);">
                                    Unauthorized
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="output" class="mt-5" style="outline: 1px solid silver; padding: 2em;">
                    <span class="text-muted">Output shows here...</span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h4 class="mt-5">Sent</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="payload"><span class="text-muted">Nothing sent yet...</span></pre>
                </div>
            </div>
            <div class="col">
                <h4 class="mt-5">Received</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="received"><span class="text-muted">Nothing received yet...</span></pre>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{define "js"}}
    <script>
        const brokerHeartbeatBtn = document.getElementById("broker-heartbeat-btn")
        const authHeartbeatBtn = document.getElementById("auth-heartbeat-btn")
        const doAuthSuccessBtn = document.getElementById("auth-success-btn")
        const doAuthUnauthorizedBtn = document.getElementById("auth-unauthorized-btn")

        const output = document.getElementById("output")
        const sent = document.getElementById("payload")
        const received = document.getElementById("received")


        function hitListener(service, port) {
            return function () {
                const emptyPostBody = {
                    method: 'POST'
                }
                fetch(`http:\/\/localhost:${port}`, emptyPostBody)
                    .then((reponse) => reponse.json())
                    .then((data) => {
                        sent.innerHTML = "empty post request"
                        received.innerHTML = JSON.stringify(data, undefined, 4)
                        if (data.error) {
                            console.error(data.error)
                        } else {
                            output.innerHTML += `<br><strong>Response from ${service}</strong>: ${data.message}`
                        }
                    })
                    .catch((err) => {
                        output.innerHTML += `<br><br>Error: ${err}`
                    })
            };
        }

        function doAuth(service, port, email, password) {
            return function () {

                const authPostBody = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        action: 'auth',
                        auth: {
                            email: email,
                            password: password
                        }
                    })
                }
                fetch(`http:\/\/localhost:${port}/handle`, authPostBody)
                    .then((reponse) => reponse.json())
                    .then((data) => {
                        sent.innerHTML = JSON.stringify(JSON.parse(authPostBody.body), undefined, 4)
                        received.innerHTML = JSON.stringify(data, undefined, 4)
                        if (data.error) {
                            output.innerHTML += `<br><strong>Error from ${service}</strong>: ${data.message}`
                        } else {
                            output.innerHTML += `<br><strong>Response from ${service}</strong>: ${data.message}`
                        }
                    })
                    .catch((err) => {
                        output.innerHTML += `<br><br>Error: ${err}`
                    })
            };
        }

        brokerHeartbeatBtn.addEventListener("click", hitListener("Broker Service", "9080"))
        authHeartbeatBtn.addEventListener("click", hitListener("Auth Service", "9081"))

        doAuthSuccessBtn.addEventListener("click", doAuth("Broker Service", "9080","admin@example.com", "dummypassword"))
        doAuthUnauthorizedBtn.addEventListener("click", doAuth("Broker Service", "9080","admin@example.com", "sillypassword"))

    </script>
{{end}}
